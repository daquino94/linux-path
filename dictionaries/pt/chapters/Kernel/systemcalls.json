{
  "id": 3,
  "title": "Chamadas de Sistema",
  "lessonContent": "Lembra-se da Britney na lição anterior? Digamos que queremos encontrá-la e tomar algumas bebidas juntos, como podemos sair de pé do lado de fora, no meio da multidão de pessoas, para dentro do círculo mais íntimo dela? Usaríamos chamadas de sistema. As chamadas de sistema são como os passes VIP que te levam a uma porta lateral secreta que leva diretamente à Britney.\n\nAs chamadas de sistema (syscall) fornecem aos processos do espaço do usuário uma maneira de solicitar ao kernel que faça algo por nós. O kernel disponibiliza certos serviços por meio da API de chamadas de sistema. Esses serviços nos permitem ler ou escrever em um arquivo, modificar o uso de memória, modificar nossa rede, etc. A quantidade de serviços é fixa, então você não pode adicionar chamadas de sistema aleatoriamente, seu sistema já possui uma tabela do que as chamadas de sistema existem e cada chamada de sistema tem um ID único. \n\nNão entrarei em detalhes sobre chamadas de sistema, pois isso exigiria que você soubesse um pouco de C, mas o básico é que quando você chama um programa como ls, o código dentro deste programa contém um invólucro de chamada de sistema (portanto, ainda não é a chamada de sistema real). Dentro deste invólucro, ele invoca a chamada de sistema que executará uma armadilha, esta armadilha é então capturada pelo manipulador de chamadas de sistema e depois faz referência à chamada de sistema na tabela de chamadas de sistema. Digamos que estamos tentando chamar a chamada de sistema stat(), ela é identificada por um ID de chamada de sistema e o objetivo da chamada de sistema stat() é consultar o status de um arquivo. Agora lembre-se, você estava executando o programa ls no modo não privilegiado. Então, agora ele vê que você está tentando fazer uma chamada de sistema, ele então o transfere para o modo kernel, lá ele faz muitas coisas, mas o mais importante é que ele verifica o número da sua chamada de sistema, encontra-o em uma tabela com base no ID da chamada de sistema e então executa a função que você queria executar. Quando terminar, ele retornará ao modo de usuário e seu processo receberá um status de retorno se foi bem-sucedido ou se ocorreu um erro. Os detalhes internos das chamadas de sistema são muito detalhados, eu recomendaria procurar informações online se quiser aprender mais. \n\nVocê pode realmente visualizar as chamadas de sistema que um processo faz com o comando strace. O comando strace é útil para depurar como um programa foi executado. \n\n<pre>$ strace ls</pre>",
  "exercise": "Não há exercícios para esta lição.",
  "quizQuestion": "O que é usado para alternar do modo de usuário para o modo kernel?",
  "quizAnswer": "chamada de sistema",
  "slug": "chamadasdesistema"
}