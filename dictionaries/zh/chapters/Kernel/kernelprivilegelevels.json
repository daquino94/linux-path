{
  "id": 2,
  "title": "权限级别",
  "lessonContent": "接下来的几节课会变得相当理论化，所以如果你正在寻找一些实用的东西，可以跳过去，稍后再回来。\n\n为什么我们为用户空间和内核设置不同的抽象层？为什么不能将两者的功能合并到一个层中？这两个层分开存在一个很好的原因。它们分别在不同的模式下运行，内核在内核模式下运行，用户空间在用户模式下运行。\n\n在内核模式下，内核可以完全访问硬件，控制一切。在用户空间模式下，你只能访问一小部分安全内存和 CPU。基本上，当我们想要执行涉及硬件的任何操作时，比如从磁盘读取数据、向磁盘写入数据、控制网络等，都是在内核模式下完成的。为什么这是必要的呢？想象一下，如果你的计算机被间谍软件感染了，你不希望它能直接访问系统的硬件。它可以访问你的所有数据、你的网络摄像头等等，这是不好的。\n\n这些不同的模式被称为权限级别（因为你获得的权限级别不同），通常被描述为保护环。为了更容易理解，我们可以这样说，假设你发现 Britney Spears 在你当地的俱乐部，她受到她的粉丝、个人保镖和俱乐部外的保安的保护。你想要她的签名（为什么不呢？），但你无法接近她，因为她受到了严密的保护。环的工作方式也是如此，最内层环对应最高的权限级别。在 x86 计算机架构中有两个主要级别或模式。环 #3 是用户模式应用程序运行的权限，环 #0 是内核运行的权限。环 #0 可以执行任何系统指令，并被完全信任。既然我们知道这些权限级别是如何工作的，那么我们如何能够向硬件写入任何内容呢？我们不会一直处于与内核不同的模式中吗？\n\n答案是通过系统调用，系统调用允许我们在内核模式下执行特权指令，然后切换回用户模式。",
  "exercise": "本课程没有练习。",
  "quizQuestion": "哪个环号具有最高权限？",
  "quizAnswer": "0",
  "slug": "kernelprivilegelevels"
}