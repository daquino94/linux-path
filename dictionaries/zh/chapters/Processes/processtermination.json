{
  "id": 5,
  "title": "进程终止",
  "lessonContent": "现在我们知道了当进程被创建时发生了什么，那么当我们不再需要它时会发生什么呢？请注意，有时Linux可能会变得有点黑暗...\n\n进程可以使用_exit系统调用退出，这将释放该进程正在使用的资源以供重新分配。因此，当一个进程准备终止时，它会使用称为终止状态的东西告诉内核它为什么要终止。最常见的状态是0，表示进程成功。然而，这还不足以完全终止一个进程。父进程必须通过使用wait系统调用来确认子进程的终止，wait系统调用会检查子进程的终止状态。我知道这听起来有点可怕，但wait调用是必要的，毕竟什么父母不想知道他们的孩子是怎么死的呢？\n\n还有另一种终止进程的方法，那就是使用信号，我们将很快讨论这个。\n\n<b>孤儿进程</b>\n\n当父进程在子进程之前死亡时，内核知道它不会收到wait调用，因此它会将这些进程变成\"孤儿\"，并将它们交给init（记得所有进程的母亲）。Init最终将为这些孤儿执行wait系统调用，以便它们可以终止。\n\n<b>僵尸进程</b>\n\n当子进程终止而父进程尚未调用wait时会发生什么？我们仍然希望能够看到子进程是如何终止的，因此即使子进程已经完成，内核也会将子进程转变为僵尸进程。子进程使用的资源仍然可以供其他进程使用，但是进程表中仍然存在这个僵尸进程的条目。僵尸进程也无法被终止，因为它们在技术上已经\"死\"，所以无法使用信号来终止它们。最终，如果父进程调用wait系统调用，僵尸进程将消失，这被称为\"收割\"。如果父进程不执行wait调用，init将接管这个僵尸进程并自动执行wait并移除僵尸。拥有太多僵尸进程可能是一件坏事，因为它们会占用进程表上的空间，如果进程表填满了，将会阻止其他进程运行。",
  "exercise": "本课程没有练习。",
  "quizQuestion": "进程成功的最常见终止状态是什么？",
  "quizAnswer": "0",
  "slug": "processtermination"
}