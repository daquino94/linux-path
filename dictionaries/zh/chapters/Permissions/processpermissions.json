{
  "id": 7,
  "title": "进程权限",
  "lessonContent": "让我们稍微讨论一下进程权限，还记得我告诉过你吗，当你使用SUID权限位运行passwd命令时，你将以root用户身份运行程序？这是正确的，但这是否意味着因为你暂时是root，你可以修改其他用户的密码？不，幸运的是不行！\n\n这是因为Linux实现了许多UID。每个进程都有三个与之关联的UID：\n\n当你启动一个进程时，它将以启动它的用户或组的权限运行，这被称为<b>有效用户ID</b>。这个UID用于授予进程访问权限。因此，如果Bob运行了touch命令，进程将以他的身份运行，他创建的任何文件都将归属于他。\n\n还有另一个UID，称为<b>真实用户ID</b>，这是启动进程的用户的ID。这些用于跟踪启动进程的用户是谁。\n\n最后一个UID是<b>保存的用户ID</b>，这允许进程在有效UID和真实UID之间切换，反之亦然。这很有用，因为我们不希望我们的进程始终以提升的特权运行，仅在特定时间使用特权是个好习惯。\n\n现在让我们通过再次查看passwd命令来将这些内容整合起来。\n\n运行passwd命令时，你的有效UID是你的用户ID，暂且说是500吧。哦，等等，记得passwd命令启用了SUID权限。所以当你运行它时，你的有效UID现在是0（0是root的UID）。现在这个程序可以以root身份访问文件。\n\n假设你有了一点权力，想要修改Sally的密码，Sally的UID是600。那么你将没那么幸运，幸运的是，这个进程也有你的真实UID，这种情况下是500。它知道你的UID是500，因此你不能修改UID为600的密码。（当然，如果你是机器上的超级用户并且可以控制和更改一切，这种情况总是被绕过的）。\n\n由于你运行了passwd，它将使用你的真实UID启动进程，并保存文件所有者的UID（有效UID），因此你可以在两者之间切换。如果不需要，就不需要修改所有具有root访问权限的文件。\n\n大多数情况下，真实UID和有效UID是相同的，但在像passwd命令这样的情况下，它们会发生变化。",
  "exercise": "我们还没有讨论过进程，我们仍然可以实时查看这种变化发生：\n\n<ol>\n<li>打开一个终端窗口，并运行命令：<b>watch -n 1 \"ps aux | grep passwd\"</b>。这将监视passwd进程。</li>\n<li>打开第二个终端窗口并运行：<b>passwd</b></li>\n<li>查看第一个终端窗口，你会看到一个passwd进程出现。进程表中的第一列是有效用户ID，惊讶吧，它是root用户！</li>\n</ol>",
  "quizQuestion": "哪个UID决定授予什么访问权限？",
  "quizAnswer": "有效",
  "slug": "processpermissions"
}