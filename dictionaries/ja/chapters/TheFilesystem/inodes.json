{
  "id": 11,
  "title": "Inodes",
  "lessonContent": "ファイルシステムは、実際のファイルとそれらのファイルを管理するデータベースから構成されていることを覚えていますか？このデータベースはinodeテーブルとして知られています。\n\n<b>inodeとは何ですか？</b>\n\ninode（インデックスノード）はこのテーブル内のエントリであり、すべてのファイルに1つずつ存在します。ファイルに関するすべての情報を記述しており、以下のようなものが含まれます：\n\n<ul>\n<li>ファイルの種類 - 通常のファイル、ディレクトリ、文字デバイスなど</li>\n<li>所有者</li>\n<li>グループ</li>\n<li>アクセス権限</li>\n<li>タイムスタンプ - mtime（最終ファイル変更時刻）、ctime（最終属性変更時刻）、atime（最終アクセス時刻）</li>\n<li>ファイルへのハードリンクの数</li>\n<li>ファイルのサイズ</li>\n<li>ファイルに割り当てられたブロック数</li>\n<li>ファイルのデータブロックへのポインタ - 最も重要な情報！</li>\n</ul>\n\n基本的に、inodeはファイルに関するすべての情報を保存しますが、ファイル名とファイル自体は保存しません！\n\n<b>inodeはいつ作成されますか？</b>\n\nファイルシステムが作成されると、inode用のスペースも割り当てられます。ディスクの容量などに応じて、どれだけのinodeスペースが必要かを決定するアルゴリズムが存在します。人生の中でディスク容量不足のエラーを見たことがあるかもしれません。同様に、inodeの不足も発生し、その結果、新しいファイルを作成できなくなることがあります。データの保存はデータとデータベース（inode）の両方に依存することを覚えておいてください。\n\nシステムに残っているinodeの数を確認するには、<b>df -i</b>コマンドを使用します。\n\n<b>inode情報</b>\n\ninodeは番号で識別され、ファイルが作成されるとinode番号が割り当てられます。番号は連続して割り当てられますが、inodeが削除されると他のファイルに再利用されることがあるため、新しいファイルを作成する際に他のファイルよりも低いinode番号が割り当てられることがあります。inode番号を表示するには、<b>ls -li</b>を実行します：\n\n<pre>\npete@icebox:~$ ls -li\n140 drwxr-xr-x 2 pete pete 6 Jan 20 20:13 Desktop\n141 drwxr-xr-x 2 pete pete 6 Jan 20 20:01 Documents\n</pre>\n\nこのコマンドの最初のフィールドにはinode番号がリストされています。\n\nまた、statを使用してファイルの詳細情報を表示できます。これにより、inodeに関する情報も表示されます。\n\n<pre>\npete@icebox:~$ stat ~/Desktop/\n  File: ‘/home/pete/Desktop/’\n  Size: 6               Blocks: 0          IO Block: 4096   directory\nDevice: 806h/2054d      Inode: 140         Links: 2\nAccess: (0755/drwxr-xr-x)  Uid: ( 1000/   pete)   Gid: ( 1000/   pete)\nAccess: 2016-01-20 20:13:50.647435982 -0800\nModify: 2016-01-20 20:13:06.191675843 -0800\nChange: 2016-01-20 20:13:06.191675843 -0800\n Birth: -\n</pre>\n\n\n<b>inodeはファイルをどのように特定するのですか？</b>\n\nデータがディスク上のどこかにあることはわかっていますが、残念ながら通常は連続して保存されていないため、inodeを使用する必要があります。inodeはファイルの実際のデータブロックを指します。典型的なファイルシステムでは（すべてが同じ方法で動作するわけではありません）、各inodeには15個のポインタが含まれており、最初の12個のポインタは直接データブロックを指します。13番目のポインタは、さらに多くのブロックを指すポインタを含むブロックを指し、14番目のポインタは別のネストされたポインタブロックを指し、15番目のポインタはさらに別のポインタブロックを指します！混乱するかもしれませんが、この方法で行われる理由は、すべてのinodeでinodeの構造を同じに保ちつつ、異なるサイズのファイルを参照できるようにするためです。小さなファイルの場合、最初の12個の直接ポインタを使用して迅速に見つけることができ、大きなファイルはポインタのネストで見つけることができます。いずれにしても、inodeの構造は同じです。",
  "exercise": "異なるファイルのinode番号を観察し、通常どれが最初に作成されますか？",
  "quizQuestion": "システムに残っているinodeの数をどのように確認しますか？",
  "quizAnswer": "df -i",
  "slug": "inodes"
}