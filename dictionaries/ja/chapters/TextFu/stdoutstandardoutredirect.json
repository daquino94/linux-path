{
  "id": 1,
  "title": "stdout (Standard Out)",
  "lessonContent": "これまでに、多くのコマンドとその出力に慣れ親しんできました。これにより、次のトピックである入出力（I/O）ストリームに移ります。次のコマンドを実行し、その動作について説明します。\n\n<pre>$ echo Hello World > peanuts.txt</pre>\n\n何が起こったのでしょうか？そのコマンドを実行したディレクトリを確認してみてください。そこにpeanuts.txtというファイルがあるはずです。そのファイルを開くと、Hello Worldというテキストが表示されるはずです。この1つのコマンドでたくさんのことが起こったので、それを分解してみましょう。\n\nまず、最初の部分を分解しましょう。\n\n<pre>$ echo Hello World</pre>\n\nこれは、Hello Worldを画面に表示することを知っていますが、どのようにして表示されるのでしょうか？プロセスは入力を受け取り、出力を返すためにI/Oストリームを使用します。デフォルトでは、echoコマンドは入力（標準入力またはstdin）をキーボードから受け取り、出力（標準出力またはstdout）を画面に返します。ですから、シェルでecho Hello Worldと入力すると、画面にHello Worldが表示されるのです。ただし、I/Oリダイレクションを使用すると、このデフォルトの動作を変更して、より柔軟なファイル操作が可能になります。\n\n次に、コマンドの次の部分に進みましょう。\n\n<pre> > </pre>\n\n> は、標準出力の送り先を変更するリダイレクト演算子です。echo Hello Worldの出力を画面ではなくファイルに送ることができます。ファイルが存在しない場合は、新規作成されます。ただし、既に存在する場合は上書きされます（使用しているシェルに応じてこれを防ぐためのシェルフラグを追加できます）。\n\nこれが基本的なstdoutリダイレクションの動作です！\n\nさて、peanuts.txtを上書きしたくない場合、そのためのリダイレクト演算子もあります。>> です。\n\n<pre>$ echo Hello World >> peanuts.txt</pre>\n\nこれにより、Hello Worldがpeanuts.txtファイルの末尾に追加されます。ファイルが存在しない場合は、> リダイレクターと同様に作成されます！",
  "exercise": "いくつかのコマンドを試してみてください：\n\n<pre>\n$ ls -l /var/log > myoutput.txt\n$ echo Hello World > rm\n$ > somefile.txt \n</pre>",
  "quizQuestion": "ファイルに出力を追加するために使用するリダイレクターは何ですか？",
  "quizAnswer": ">>",
  "slug": "stdoutstandardoutredirect"
}