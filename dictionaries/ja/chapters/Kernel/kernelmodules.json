{
  "id": 6,
  "title": "カーネルモジュール",
  "lessonContent": "私たちが素敵な車に乗っているとしましょう。たくさんの時間とお金を投資しました。スポイラーやフック、バイクラックなど、さまざまなものを追加しました。これらのコンポーネントは実際には車のコア機能を変更しませんし、簡単に取り外したり追加したりできます。カーネルは、カーネルモジュールを使用して同じコンセプトを使用します。\n\nカーネル自体はモノリシックなソフトウェアです。新しいタイプのキーボードに対応するために追加したい場合、そのコードを直接カーネルコードに書き込むわけではありません。車にバイクラックを溶接しないように（まあ、一部の人はそうするかもしれませんが）。カーネルモジュールは、必要に応じてカーネルにロードおよびアンロードできるコードの断片です。これにより、カーネルのコアコードに追加せずにカーネルの機能を拡張できます。ほとんどの場合、システムを再起動せずにモジュールを追加および削除できます。\n\n<b>現在ロードされているモジュールのリストを表示</b>\n\n<pre>$ lsmod</pre>\n\n<b>モジュールをロード</b>\n\n<pre>$ sudo modprobe bluetooth</pre>\n\nModprobeは、<b>/lib/modules/(カーネルバージョン)/kernel/drivers</b>からモジュールを試みます。カーネルモジュールには依存関係がある場合があり、modprobeは依存モジュールをロードしていない場合にそれらをロードします。\n\n<b>モジュールを削除</b>\n\n<pre>$ sudo modprobe -r bluetooth</pre>\n\n<b>起動時にロード</b>\n\n一時的にmodprobeでロードするのではなく、システム起動時にモジュールをロードすることもできます。単に<b>/etc/modprobe.d</b>ディレクトリを変更し、次のような構成ファイルを追加します。\n\n<pre>pete@icebox:~$ /etc/modprobe.d/peanutbutter.conf\n\noptions peanut_butter type=almond\n</pre>\n\n少々奇抜な例ですが、peanut_butterというモジュールがあり、type=almondのカーネルパラメータを追加したい場合は、この構成ファイルを使用して起動時にロードできます。また、カーネルモジュールには独自のカーネルパラメータがあるため、詳細を確認するためにモジュールについて読む必要があります。\n\n<b>起動時にロードしない</b>\n\nモジュールが起動時にロードされないようにするには、次のような構成ファイルを追加します。\n\n<pre>pete@icebox:~$ /etc/modprobe.d/peanutbutter.conf\n\nblacklist peanut_butter\n</pre>",
  "exercise": "modprobeを使用してBluetoothモジュールをアンロードし、何が起こるかを確認してください。これを修正する方法は？",
  "quizQuestion": "モジュールをアンロードするために使用されるコマンドは何ですか？",
  "quizAnswer": "modprobe -r",
  "slug": "kernelmodules"
}