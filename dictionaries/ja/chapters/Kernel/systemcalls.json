{
  "id": 3,
  "title": "システムコール",
  "lessonContent": "前のレッスンでブリトニーを覚えていますか？ 彼女に会い、一緒に飲みに行きたいとしましょう。人混みの外で立っている状態から、彼女の最も内側のサークルに入るにはどうすればよいでしょうか？ それにはシステムコールを使用します。 システムコールは、あなたをブリトニーの直接つながる秘密の裏口に導くVIPパスのようなものです。\n\nシステムコール（syscall）は、ユーザースペースのプロセスに、カーネルに何かを依頼する方法を提供します。 カーネルは、システムコールAPIを介して特定のサービスを利用可能にします。 これらのサービスにより、ファイルへの読み書き、メモリ使用量の変更、ネットワークの変更などが可能になります。 サービスの数は固定されているため、システムコールを勝手に追加することはできません。 すでにシステムには存在するシステムコールの表があり、各システムコールには固有のIDがあります。\n\nシステムコールの詳細については触れませんが、それには少しのC言語の知識が必要です。 ただし、基本的な考え方は、lsのようなプログラムを呼び出すとき、このプログラム内のコードにはシステムコールラッパー（実際のシステムコールではない）が含まれています。 このラッパー内でシステムコールが呼び出され、トラップが実行され、そのトラップがシステムコールハンドラによって捕捉され、システムコールテーブル内のシステムコールを参照します。 たとえば、stat()システムコールを呼び出そうとしているとします。これはシステムコールIDで識別され、stat()システムコールの目的はファイルの状態をクエリすることです。 そして、lsプログラムを特権モードで実行していなかったことを覚えておいてください。 したがって、システムコールを行おうとしていることがわかると、ユーザーモードからカーネルモードに切り替えられ、そこで多くの処理が行われますが、最も重要なのは、システムコール番号を検索し、そのIDに基づいてテーブル内で見つけ、実行したい関数を実行します。 完了したら、ユーザーモードに戻り、プロセスは成功したかエラーが発生したかに応じた戻りステータスを受け取ります。 システムコールの内部動作は非常に詳細になりますので、さらに学習したい場合はオンライン情報を参照することをお勧めします。\n\nプロセスが行うシステムコールをstraceコマンドで表示することができます。 straceコマンドは、プログラムの実行方法をデバッグするのに役立ちます。\n\n<pre>$ strace ls</pre>",
  "exercise": "このレッスンには演習問題はありません。",
  "quizQuestion": "ユーザーモードからカーネルモードに切り替えるために使用されるものは何ですか？",
  "quizAnswer": "システムコール",
  "slug": "systemcalls"
}