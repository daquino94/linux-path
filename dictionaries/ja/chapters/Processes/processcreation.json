{
  "id": 4,
  "title": "プロセスの作成",
  "lessonContent": "このレッスンと次のレッスンは、あなたがプロセスをもう少し扱ってみた後に戻ってきてもらうための情報です。\n\n新しいプロセスが作成されると、既存のプロセスは基本的にフォークシステムコールを使用して自身をクローンします（システムコールについては遠い未来に議論されます）。フォークシステムコールはほぼ同一の子プロセスを作成し、この子プロセスは新しいプロセスID（PID）を引き継ぎ、元のプロセスは親プロセスとなり、親プロセスID <b>PPID</b> というものを持ちます。その後、子プロセスは、親が以前に使用していたプログラムを引き続き使用するか、より頻繁には execve システムコールを使用して新しいプログラムを起動します。このシステムコールは、そのプロセスのためにカーネルが設定したメモリ管理を破壊し、新しいプログラムのために新しいメモリ管理をセットアップします。\n\nこれを実際に見てみましょう:\n\n<pre>$ ps l</pre>\n\nl オプションは、実行中のプロセスの「長い形式」またはさらに詳細な表示を提供します。 <b>PPID</b> というラベルが付いた列があります。次に、ターミナルを見てください。シェルが実行されているプロセスが表示されます。私のシステムでは、bash が実行されているプロセスがあります。次に、ps l コマンドを実行したとき、bash が実行されているプロセスから実行していたことを思い出してください。すると、bash シェルの <b>PID</b> が <b>ps l</b> コマンドの <b>PPID</b> になっていることがわかります。\n\nしたがって、すべてのプロセスには親プロセスが必要であり、それらはお互いにフォークされたものであるなら、すべてのプロセスの親であるプロセスが存在するはずですよね？正しいです、システムが起動すると、カーネルは <b>init</b> というプロセスを作成します。そのPIDは1です。init プロセスはシステムがシャットダウンされるまで終了できません。root 権限で実行され、システムを稼働させるために多くのプロセスを実行します。init については、システムの起動時のコースで詳しく見ていきますが、今のところは他のすべてのプロセスを生成するプロセスであることを知っておいてください。",
  "exercise": "実行中のプロセスを確認して、他のプロセスがどのプロセスを親として持っているかを見つけられますか？",
  "quizQuestion": "新しいプロセスを作成するシステムコールは何ですか？",
  "quizAnswer": "fork",
  "slug": "processcreation"
}