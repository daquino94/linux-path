{
  "id": 11,
  "title": "ジョブ制御",
  "lessonContent": "1 つの端末ウィンドウで作業していて、時間がかかるコマンドを実行しているとします。それが完了するまでシェルとやり取りすることはできませんが、私たちはマシンで作業を続けたいので、そのシェルを開いたままにしておきたいです。幸いなことに、ジョブを使ってプロセスの実行方法を制御することができます:\n\n<b>ジョブをバックグラウンドに送信する</b>\n\nコマンドにアンパサンド(&)を追加すると、それをバックグラウンドで実行してシェルを引き続き使用できます。例を見てみましょう:\n\n<pre>$ sleep 1000 &\n$ sleep 1001 &\n$ sleep 1002 &\n</pre>\n\n<b>すべてのバックグラウンドジョブを表示する</b>\n\n今、バックグラウンドに送信したジョブを表示できます。\n\n<pre>$ jobs\n\n[1]    Running     sleep 1000 &\n[2]-   Running     sleep 1001 &\n[3]+   Running     sleep 1002 &\n\n</pre>\n\nこれにより、最初の列にジョブ ID、次にステータス、そして実行されたコマンドが表示されます。ジョブ ID の横にある <b>+</b> は、最も最近に開始されたバックグラウンドジョブを示します。 <b>-</b> が付いているジョブは 2 番目に最近のコマンドです。\n\n<b>既存のジョブをバックグラウンドに送信する</b>\n\nすでにジョブを実行しており、それをバックグラウンドに送信したい場合、それを終了して最初からやり直す必要はありません。まず、Ctrl-Z でジョブを一時停止し、その後 <b>bg</b> コマンドを実行してバックグラウンドに送信します。\n\n<pre>\npete@icebox ~ $ sleep 1003\n^Z\n[4]+    Stopped     sleep 1003\n\npete@icebox ~ $ bg\n[4]+    sleep 1003 &\n\npete@icebox ~ $ jobs\n\n[1]    Running     sleep 1000 &\n[2]    Running     sleep 1001 &\n[3]-   Running     sleep 1002 &\n[4]+   Running     sleep 1003 &\n</pre>\n\n<b>バックグラウンドからフォアグラウンドにジョブを移動する</b>\n\nバックグラウンドからジョブを取り出すには、移動したいジョブ ID を指定します。オプションを指定せずに fg を実行すると、最も最近のバックグラウンドジョブ (＋記号の付いたジョブ) を取り戻します。\n\n<pre>$ fg %1</pre>\n\n<b>バックグラウンドジョブを終了する</b>\n\nバックグラウンドからジョブを取り出すのと同様に、ジョブ ID を使用してプロセスを終了するために同じ形式を使用できます。\n\n<pre>kill %1</pre>",
  "exercise": "バックグラウンドとフォアグラウンドの間でジョブを移動する",
  "quizQuestion": "バックグラウンドジョブをリストするために使用されるコマンドは何ですか？",
  "quizAnswer": "jobs",
  "slug": "jobcontrol"
}