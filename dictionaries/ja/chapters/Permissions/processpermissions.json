{
  "id": 7,
  "title": "プロセス権限",
  "lessonContent": "少しプロセス権限について話してみましょう。SUID パーミッションビットを有効にして passwd コマンドを実行すると、プログラムが root として実行されることを覚えていますか？ それは事実ですが、では一時的に root として実行されるため、他のユーザーのパスワードを変更できるということでしょうか？ いいえ、幸いにもそうではありません！\n\nこれは Linux が実装している多くの UID のおかげです。すべてのプロセスには 3 つの UID が関連付けられています:\n\nプロセスを起動すると、そのプロセスは起動したユーザーまたはグループと同じ権限で実行されます。これは <b>有効ユーザー ID</b> として知られています。この UID はプロセスにアクセス権を付与するために使用されます。したがって、たとえば Bob が touch コマンドを実行した場合、プロセスは彼として実行され、作成されたファイルは彼の所有権の下に置かれます。\n\nもう 1 つの UID があり、それは <b>実ユーザー ID</b> と呼ばれ、これはプロセスを起動したユーザーの ID です。これらはプロセスを起動したユーザーを追跡するために使用されます。\n\n最後の UID は <b>保存ユーザー ID</b> で、プロセスが有効 UID と実 UID の間を切り替えることを可能にします。これは、プロセスが常に昇格された権限で実行されることを避けたいために役立ちます。特定のタイミングで特別な権限を使用するのは良い習慣です。\n\nこれで、もう一度 passwd コマンドを見てみましょう。\n\npasswd コマンドを実行すると、有効 UID はユーザー ID です。仮に今は 500 とします。しかし、待ってください、passwd コマンドには SUID パーミッションが有効になっていることを覚えていますか。ですので、実行すると、有効 UID は今や 0 です（0 は root の UID です）。このプログラムは今や root としてファイルにアクセスできます。\n\nちょっとした権力を手に入れて Sally のパスワードを変更したいとします。Sally の UID は 600 です。しかし、幸運なことに、このプロセスにはあなたの実 UID である 500 も含まれています。あなたの UID が 500 であることを知っているため、UID が 600 のパスワードを変更できません。（もちろん、マシン上のスーパーユーザーであり、すべてを制御および変更できる場合は常にこれをバイパスできます）。\n\npasswd を実行した場合、プロセスはあなたの実 UID を使用して開始し、ファイルの所有者の UID（有効 UID）を保存するため、2 つの間を切り替えることができます。必要がない場合は、すべてのファイルを root アクセスで変更する必要はありません。\n\nほとんどの場合、実 UID と有効 UID は同じですが、passwd コマンドのような場合は変更されます。",
  "exercise": "まだプロセスについては議論していませんが、実際に変更がリアルタイムで発生しているのを見てみましょう:\n\n<ol>\n<li>1 つ目のターミナルウィンドウを開き、次のコマンドを実行します: <b>watch -n 1 \"ps aux | grep passwd\"</b>。これにより passwd プロセスが監視されます。</li>\n<li>2 つ目のターミナルウィンドウを開き、<b>passwd</b> を実行します</li>\n<li>1 つ目のターミナルウィンドウを見てください。passwd のプロセスが表示されます。プロセステーブルの最初の列は有効ユーザー ID ですが、root ユーザーであることがわかります！</li>\n</ol>",
  "quizQuestion": "どの UID がアクセス権を決定しますか？",
  "quizAnswer": "effective",
  "slug": "processpermissions"
}