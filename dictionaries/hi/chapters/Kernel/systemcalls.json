{
  "id": 3,
  "title": "सिस्टम कॉल्स",
  "lessonContent": "पिछले सबक में ब्रिटनी को याद करें? चलो मान लो हम उसे देखना चाहते हैं और कुछ पेय पीने के लिए, हम खड़े होकर भी भीड़ के बाहर से उसके अंदरी वर्ग में कैसे पहुंचेंगे? हम सिस्टम कॉल्स का उपयोग करेंगे। सिस्टम कॉल्स वे VIP पास हैं जो आपको एक गुप्त साइड दरवाजे तक पहुंचाते हैं जो सीधे ब्रिटनी के पास जाता है।\n\nसिस्टम कॉल्स (सिस्कॉल) उपयोगकर्ता स्थान प्रक्रियाओं को करने के लिए कर्नेल से कुछ मांगने का एक तरीका प्रदान करते हैं। कर्नेल सिस्टम कॉल API के माध्यम से कुछ सेवाएं उपलब्ध कराता है। ये सेवाएं हमें फ़ाइल पढ़ने या लिखने, मेमोरी उपयोग में परिवर्तन करने, हमारा नेटवर्क मोडिफ़ाई करने आदि करने की अनुमति देती हैं। सेवाओं की मात्रा स्थिर है, इसलिए आप सिस्टम कॉल्स को बेहुदा जोड़ नहीं सकते, आपके सिस्टम में पहले से ही किस सिस्टम कॉल का तालिका है और प्रत्येक सिस्टम कॉल का एक अद्वितीय आईडी होता है।\n\nमैं सिस्टम कॉल्स की विशेषताओं में नहीं जाऊंगा, क्योंकि इसके लिए आपको C के थोड़े से जानकारी होनी चाहिए, लेकिन मूल बात यह है कि जब आप ls जैसे कोई प्रोग्राम कॉल करते हैं, तो इस प्रोग्राम के अंदर का कोड एक सिस्टम कॉल रैपर (इसलिए असल सिस्टम कॉल नहीं) शामिल होता है। इस रैपर के अंदर वह सिस्टम कॉल को आमंत्रित करता है जो एक फंदा कार्यान्वित करेगा, यह फंदा फिर सिस्टम कॉल हैंडलर द्वारा पकड़ा जाता है और फिर सिस्टम कॉल तालिका में सिस्टम कॉल को संदर्भित करता है। मान लो हम stat() सिस्टम कॉल को कॉल करने की कोशिश कर रहे हैं, इसे सिस्कॉल आईडी द्वारा पहचाना जाता है और stat() सिस्टम कॉल का उद्देश्य एक फ़ाइल की स्थिति का पूछताछ करना है। अब याद रखें, आप गैर-विशेषाधिकार मोड में ls प्रोग्राम चला रहे थे। तो अब यह देखता है कि आप सिस्टम कॉल करने की कोशिश कर रहे हैं, तो यह आपको कर्नेल मोड में स्विच कर देता है, वहां यह बहुत सारी चीजें करता है लेकिन सबसे महत्वपूर्ण यह है कि यह आपके सिस्कॉल नंबर को खोजता है, सिस्कॉल आईडी के आधार पर एक तालिका में इसे खोजता है और फिर आपके द्वारा चलाना चाहते फ़ंक्शन को कार्यान्वित करता है। जब यह समाप्त हो जाता है, तो यह उपयोगकर्ता मोड में वापस लौट जाता है और आपकी प्रक्रिया को यदि यह सफल था या अगर उसमें कोई त्रुटि थी तो एक रिटर्न स्थिति प्राप्त होगी। सिस्टम कॉल्स की आंतरिक कामनाएँ वास्तव में विस्तृत होती हैं, मैं आपको अधिक जानने के लिए ऑनलाइन जानकारी देखने की सिफारिश करूंगा।\n\nआप वास्तव में एक प्रक्रिया द्वारा किए गए सिस्टम कॉल्स को strace कमांड के साथ देख सकते हैं। strace कमांड एक प्रोग्राम कैसे निष्पादित हुआ है, इसकी डीबगिंग के लिए उपयोगी है।\n\n<pre>$ strace ls</pre>",
  "exercise": "इस सबक के लिए कोई व्यायाम नहीं।",
  "quizQuestion": "उपयोगकर्ता मोड से कर्नेल मोड में स्विच करने के लिए क्या उपयोग किया जाता है?",
  "quizAnswer": "सिस्टम कॉल",
  "slug": "systemcalls"
}