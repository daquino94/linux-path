{
  "id": 3,
  "title": "Llamadas al sistema",
  "lessonContent": "¿Recuerdas a Britney en la lección anterior? Digamos que queremos verla y tomar algo juntos, ¿cómo pasamos de estar afuera entre la multitud de personas a estar dentro de su círculo más íntimo? Usaríamos llamadas al sistema. Las llamadas al sistema son como los pases VIP que te llevan a una puerta lateral secreta que conduce directamente a Britney.\n\nLas llamadas al sistema (syscall) proporcionan a los procesos del espacio de usuario una forma de solicitar al kernel que haga algo por nosotros. El kernel pone a disposición ciertos servicios a través de la API de llamadas al sistema. Estos servicios nos permiten leer o escribir en un archivo, modificar el uso de memoria, modificar nuestra red, etc. La cantidad de servicios es fija, por lo que no puedes estar agregando llamadas al sistema sin ton ni son, tu sistema ya tiene una tabla de qué llamadas al sistema existen y cada llamada al sistema tiene un ID único. \n\nNo entraré en detalles de las llamadas al sistema, ya que eso requeriría que sepas un poco de C, pero lo básico es que cuando llamas a un programa como ls, el código dentro de este programa contiene un envoltorio de llamada al sistema (así que no es la llamada al sistema real todavía). Dentro de este envoltorio, se invoca la llamada al sistema que ejecutará una trampa, esta trampa luego es capturada por el controlador de llamadas al sistema y luego hace referencia a la llamada al sistema en la tabla de llamadas al sistema. Digamos que estamos tratando de llamar a la llamada al sistema stat(), esta se identifica por un ID de llamada al sistema y el propósito de la llamada al sistema stat() es consultar el estado de un archivo. Ahora recuerda, estabas ejecutando el programa ls en modo no privilegiado. Entonces ahora ve que estás intentando hacer una llamada al sistema, luego te cambia a modo kernel, allí hace muchas cosas pero lo más importante es que busca tu número de llamada al sistema, lo encuentra en una tabla basada en el ID de la llamada al sistema y luego ejecuta la función que querías ejecutar. Una vez que haya terminado, volverá al modo de usuario y tu proceso recibirá un estado de retorno si fue exitoso o si tuvo un error. Los entresijos de las llamadas al sistema se vuelven realmente detallados, te recomendaría buscar información en línea si quieres aprender más. \n\nEn realidad, puedes ver las llamadas al sistema que un proceso realiza con el comando strace. El comando strace es útil para depurar cómo se ejecutó un programa. \n\n<pre>$ strace ls</pre>",
  "exercise": "No hay ejercicios para esta lección.",
  "quizQuestion": "¿Qué se utiliza para cambiar de modo de usuario a modo kernel?",
  "quizAnswer": "llamada al sistema",
  "slug": "llamadas-al-sistema"
}