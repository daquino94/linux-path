{
  "id": 3,
  "title": "stderr (Error Estándar)",
  "lessonContent": "Intentemos algo un poco diferente ahora, intentemos listar el contenido de un directorio que no existe en tu sistema y redirigir la salida al archivo peanuts.txt nuevamente.\n\n<pre>$ ls /fake/directory > peanuts.txt </pre>\n\nLo que deberías ver es: \n\n<pre>ls: no se puede acceder a /fake/directory: No existe el archivo o directorio</pre>\n\nAhora probablemente estés pensando, ¿no debería ese mensaje haber sido enviado al archivo? En realidad, hay otro flujo de E/S en juego aquí llamado error estándar (stderr). Por defecto, stderr envía su salida también a la pantalla, es un flujo completamente diferente que stdout. Así que necesitarás redirigir su salida de una manera diferente. \n\nDesafortunadamente, el redireccionador no es tan agradable como usar <b>&lt;</b> o <b>&gt;</b> pero es bastante cercano. Tendremos que usar descriptores de archivo. Un descriptor de archivo es un número no negativo que se utiliza para acceder a un archivo o flujo. Profundizaremos en esto más adelante, pero por ahora debes saber que el descriptor de archivo para stdin, stdout y stderr es 0, 1 y 2 respectivamente. \n\nEntonces, si queremos redirigir nuestro stderr al archivo podemos hacer esto: \n\n<pre>$ ls /fake/directory 2> peanuts.txt</pre>\n\nDeberías ver solo los mensajes de stderr en peanuts.txt. \n\n¿Y si quisiera ver tanto stderr como stdout en el archivo peanuts.txt? Es posible hacer esto también con descriptores de archivo: \n\n<pre>$ ls /fake/directory > peanuts.txt 2>&1</pre>\n\nEsto envía los resultados de ls /fake/directory al archivo peanuts.txt y luego redirige stderr a stdout a través de 2>&1. El orden de las operaciones aquí importa, 2>&1 envía stderr a donde stdout está apuntando. En este caso, stdout está apuntando a un archivo, por lo que 2>&1 también envía stderr a un archivo. Así que si abres ese archivo peanuts.txt deberías ver tanto stderr como stdout. En nuestro caso, el comando anterior solo muestra stderr.\n\nHay una forma más corta de redirigir tanto stdout como stderr a un archivo:\n\n<pre>$ ls /fake/directory &> peanuts.txt</pre>\n\n¿Y si no quiero nada de eso y quiero deshacerme por completo de los mensajes de stderr? Bueno, también puedes redirigir la salida a un archivo especial llamado /dev/null y descartará cualquier entrada.\n\n<pre>$ ls /fake/directory 2> /dev/null</pre>",
  "exercise": "¿Qué está haciendo el siguiente comando? \n\n<pre>$ ls /fake/directory >> /dev/null 2>&1</pre>",
  "quizQuestion": "¿Cuál es el redireccionador para stderr?",
  "quizAnswer": "2>",
  "slug": "stderrstandarderrorredirect"
}