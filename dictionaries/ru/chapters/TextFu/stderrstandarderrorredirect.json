{
  "id": 3,
  "title": "stderr (Стандартная ошибка)",
  "lessonContent": "Давайте попробуем что-то немного отличающееся теперь, давайте попробуем вывести содержимое каталога, которого нет в вашей системе, и снова перенаправить вывод в файл peanuts.txt.\n\n<pre>$ ls /fake/directory > peanuts.txt </pre>\n\nЧто вы должны увидеть: \n\n<pre>ls: cannot access /fake/directory: No such file or directory</pre>\n\nТеперь вы, вероятно, думаете, не должно ли это сообщение быть отправлено в файл? Здесь фактически используется еще один поток ввода-вывода, называемый стандартная ошибка (stderr). По умолчанию stderr также отправляет свой вывод на экран, это совершенно другой поток, чем stdout. Поэтому вам нужно перенаправить его вывод по-другому. \n\nК сожалению, перенаправление не так просто, как использование <b>&lt;</b> или <b>&gt;</b>, но это довольно близко. Нам нужно использовать файловые дескрипторы. Файловый дескриптор - это неотрицательное число, которое используется для доступа к файлу или потоку. Мы подробно рассмотрим это позже, но пока знайте, что дескриптор файла для stdin, stdout и stderr равен соответственно 0, 1 и 2. \n\nТак что теперь, если мы хотим перенаправить наш stderr в файл, мы можем сделать это так: \n\n<pre>$ ls /fake/directory 2> peanuts.txt</pre>\n\nВы должны увидеть только сообщения stderr в peanuts.txt. \n\nЧто если я хочу видеть как stderr, так и stdout в файле peanuts.txt? Это также возможно с помощью файловых дескрипторов: \n\n<pre>$ ls /fake/directory > peanuts.txt 2>&1</pre>\n\nЭто отправляет результаты ls /fake/directory в файл peanuts.txt, а затем перенаправляет stderr в stdout через 2>&1. Здесь важен порядок операций, 2>&1 отправляет stderr туда, куда указывает stdout. В данном случае stdout указывает на файл, поэтому 2>&1 также отправляет stderr в файл. Так что если вы откроете файл peanuts.txt, вы увидите как stderr, так и stdout. В нашем случае вышеуказанная команда выводит только stderr.\n\nСуществует более короткий способ перенаправить как stdout, так и stderr в файл:\n\n<pre>$ ls /fake/directory &> peanuts.txt</pre>\n\nЧто если мне не нужен весь этот мусор и я хочу полностью избавиться от сообщений stderr? Также можно перенаправить вывод в специальный файл с именем /dev/null, и он отбросит любой ввод.\n\n<pre>$ ls /fake/directory 2> /dev/null</pre>",
  "exercise": "Что делает следующая команда? \n\n<pre>$ ls /fake/directory >> /dev/null 2>&1</pre>",
  "quizQuestion": "Какой перенаправитель для stderr?",
  "quizAnswer": "2>",
  "slug": "stderrstandarderrorredirect"
}