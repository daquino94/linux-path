{
  "id": 3,
  "title": "Вызовы системы",
  "lessonContent": "Помните Бритни из предыдущего урока? Допустим, мы хотим увидеть ее и выпить вместе, как мы можем перейти от стояния снаружи среди толпы людей к нахождению в ее самом близком круге? Мы бы использовали вызовы системы. Вызовы системы похожи на VIP-пропуски, которые позволяют вам попасть к секретной боковой двери, ведущей прямо к Бритни.\n\nВызовы системы (syscall) предоставляют процессам пользовательского пространства способ запросить ядру выполнить что-то для нас. Ядро предоставляет определенные службы через API вызовов системы. Эти службы позволяют нам читать или записывать в файл, изменять использование памяти, изменять нашу сеть и т. д. Количество служб фиксировано, поэтому вы не можете просто добавлять вызовы системы как попало, ваша система уже имеет таблицу существующих вызовов системы, и у каждого вызова системы есть уникальный идентификатор. \n\nЯ не буду вдаваться в детали вызовов системы, так как для этого вам потребуется немного знать C, но основная идея заключается в том, что при вызове программы, например, ls, код внутри этой программы содержит оболочку вызова системы (поэтому это еще не сам вызов системы). Внутри этой оболочки он вызывает вызов системы, который выполняет ловушку, которую затем перехватывает обработчик вызова системы, а затем ссылается на вызов системы в таблице вызовов системы. Допустим, мы пытаемся вызвать вызов системы stat(), он идентифицируется уникальным идентификатором вызова системы, и цель вызова системы stat() - запросить статус файла. Теперь помните, что вы запускали программу ls в непривилегированном режиме. Так что теперь, когда он видит, что вы пытаетесь сделать вызов системы, он переключает вас в режим ядра, где делает много вещей, но самое главное - он ищет ваш номер вызова системы, находит его в таблице на основе идентификатора вызова системы, и затем выполняет функцию, которую вы хотели запустить. После завершения он вернется в режим пользователя, и ваш процесс получит статус возврата, если операция была успешной или если произошла ошибка. Внутренние механизмы вызовов системы становятся очень детальными, я бы порекомендовал посмотреть информацию в Интернете, если вы хотите узнать больше. \n\nВы можете просматривать вызовы системы, которые делает процесс, с помощью команды strace. Команда strace полезна для отладки того, как программа выполняется. \n\n<pre>$ strace ls</pre>",
  "exercise": "Урок не содержит упражнений.",
  "quizQuestion": "Что используется для перехода из пользовательского режима в режим ядра?",
  "quizAnswer": "вызов системы",
  "slug": "вызовысистемы"
}