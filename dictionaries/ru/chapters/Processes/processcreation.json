{
  "id": 4,
  "title": "Создание процесса",
  "lessonContent": "Снова этот урок и следующий - это просто информация, чтобы вы могли увидеть, что находится под капотом. Не стесняйтесь вернуться к этому, когда поработаете с процессами немного больше.\n\nКогда создается новый процесс, существующий процесс в основном клонирует себя, используя что-то, называемое вызовом системы fork (вызовы системы будут обсуждаться очень далеко в будущем). Вызов системы fork создает в основном идентичный дочерний процесс, этот дочерний процесс получает новый идентификатор процесса (PID), исходный процесс становится его родительским процессом и имеет так называемый идентификатор родительского процесса <b>PPID</b>. Затем дочерний процесс может либо продолжать использовать ту же программу, которую использовал его родитель, либо, чаще всего, использовать вызов системы execve для запуска новой программы. Этот вызов системы разрушает управление памятью, которое ядро установило для этого процесса, и устанавливает новые для новой программы. \n\nМы можем увидеть это на деле:\n\n<pre>$ ps l</pre>\n\nОпция l дает нам \"длинный формат\" или еще более подробный вид наших работающих процессов. Вы увидите столбец с меткой <b>PPID</b>, это идентификатор родителя. Теперь посмотрите на ваш терминал, вы увидите работающий процесс, это ваша оболочка, так что на моей системе работает процесс bash. Теперь помните, когда вы запускали команду ps l, вы запускали ее из процесса, который запускал bash. Теперь вы увидите, что <b>PID</b> оболочки bash является <b>PPID</b> команды <b>ps l</b>.\n\nИтак, если каждый процесс должен иметь родителя, и они просто являются копиями друг друга, должна быть мать всех процессов, верно? Вы правы, когда система загружается, ядро создает процесс под названием <b>init</b>, у него PID 1. Процесс init не может быть завершен, пока система не выключится. Он работает с привилегиями root и запускает множество процессов, которые поддерживают работу системы. Мы рассмотрим init ближе в курсе загрузки системы, а пока просто знайте, что это процесс, который порождает все остальные процессы.",
  "exercise": "Посмотрите на ваши работающие процессы, можете ли вы увидеть, у каких других процессов есть родители?",
  "quizQuestion": "Какой вызов системы создает новый процесс?",
  "quizAnswer": "fork",
  "slug": "созданиепроцесса"
}