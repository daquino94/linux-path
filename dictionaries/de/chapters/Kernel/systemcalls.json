{
  "id": 3,
  "title": "System Calls",
  "lessonContent": "Erinnern Sie sich an Britney aus der vorherigen Lektion? Angenommen, wir möchten sie sehen und zusammen etwas trinken, wie gelangen wir vom Stehen draußen in den Menschenmengen in ihren innersten Kreis? Wir würden Systemaufrufe verwenden. Systemaufrufe sind wie VIP-Pässe, die Sie zu einer geheimen Seitentür bringen, die direkt zu Britney führt.\n\nSystemaufrufe (Syscalls) bieten Benutzerprozessen eine Möglichkeit, den Kernel um etwas zu bitten. Der Kernel stellt bestimmte Dienste über die Systemaufruf-API zur Verfügung. Diese Dienste ermöglichen es uns, in eine Datei zu lesen oder zu schreiben, den Speicherverbrauch zu ändern, unser Netzwerk zu ändern usw. Die Anzahl der Dienste ist festgelegt, daher können Sie nicht beliebig viele Systemaufrufe hinzufügen. Ihr System hat bereits eine Tabelle, welche Systemaufrufe existieren, und jeder Systemaufruf hat eine eindeutige ID. \n\nIch werde nicht auf Details von Systemaufrufen eingehen, da dies erfordern würde, dass Sie ein wenig C kennen, aber das Grundlegende ist, dass wenn Sie ein Programm wie ls aufrufen, der Code in diesem Programm einen Systemaufruf-Wrapper enthält (also noch nicht den tatsächlichen Systemaufruf). Innerhalb dieses Wrappers ruft er den Systemaufruf auf, der eine Falle ausführt. Diese Falle wird dann vom Systemaufruf-Handler abgefangen und verweist dann auf den Systemaufruf in der Systemaufruftabelle. Angenommen, wir versuchen den stat() Systemaufruf aufzurufen, er wird durch eine Syscall-ID identifiziert und der Zweck des stat() Systemaufrufs besteht darin, den Status einer Datei abzufragen. Denken Sie daran, Sie haben das ls-Programm im Nicht-Privilegierten Modus ausgeführt. Jetzt sieht es, dass Sie versuchen, einen Systemaufruf zu tätigen, es schaltet Sie dann in den Kernelmodus um, dort tut es viele Dinge, aber am wichtigsten ist, dass es Ihre Syscall-Nummer nachschlägt, sie in einer Tabelle anhand der Syscall-ID findet und dann die Funktion ausführt, die Sie ausführen wollten. Sobald dies erledigt ist, kehrt es in den Benutzermodus zurück und Ihr Prozess erhält einen Rückgabestatus, ob es erfolgreich war oder ob ein Fehler aufgetreten ist. Die Funktionsweise von Syscalls wird sehr detailliert, ich würde empfehlen, online nach weiteren Informationen zu suchen. \n\nSie können tatsächlich die Systemaufrufe, die ein Prozess tätigt, mit dem Befehl strace anzeigen. Der Befehl strace ist nützlich, um zu debuggen, wie ein Programm ausgeführt wurde. \n\n<pre>$ strace ls</pre>",
  "exercise": "Für diese Lektion gibt es keine Übungen.",
  "quizQuestion": "Was wird verwendet, um vom Benutzermodus in den Kernelmodus zu wechseln?",
  "quizAnswer": "Systemaufruf",
  "slug": "systemcalls"
}