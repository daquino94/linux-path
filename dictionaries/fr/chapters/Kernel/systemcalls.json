{
  "id": 3,
  "title": "Appels Système",
  "lessonContent": "Vous vous souvenez de Britney dans la leçon précédente? Disons que nous voulons la voir et prendre un verre ensemble, comment passer de l'extérieur, parmi la foule de gens, à l'intérieur de son cercle le plus intime? Nous utiliserions des appels système. Les appels système sont comme des laissez-passer VIP qui vous conduisent à une porte dérobée secrète menant directement à Britney.\n\nLes appels système (syscall) fournissent aux processus de l'espace utilisateur un moyen de demander au noyau de faire quelque chose pour nous. Le noyau met à disposition certains services via l'API des appels système. Ces services nous permettent de lire ou d'écrire dans un fichier, de modifier l'utilisation de la mémoire, de modifier notre réseau, etc. Le nombre de services est fixe, donc vous ne pouvez pas ajouter des appels système au hasard, votre système a déjà une table des appels système existants et chaque appel système a un identifiant unique. \n\nJe ne rentrerai pas dans les détails des appels système, car cela nécessiterait que vous connaissiez un peu le langage C, mais l'essentiel est que lorsque vous appelez un programme comme ls, le code à l'intérieur de ce programme contient un wrapper d'appel système (donc pas encore l'appel système réel). À l'intérieur de ce wrapper, il invoque l'appel système qui exécutera un piège, ce piège sera ensuite intercepté par le gestionnaire d'appels système et fera référence à l'appel système dans la table des appels système. Disons que nous essayons d'appeler l'appel système stat(), il est identifié par un ID d'appel système et l'objectif de l'appel système stat() est de consulter le statut d'un fichier. Maintenant, rappelez-vous, vous exécutiez le programme ls en mode non privilégié. Donc maintenant, il voit que vous essayez de faire un appel système, il vous bascule alors en mode noyau, là il fait beaucoup de choses mais surtout il recherche votre numéro d'appel système, le trouve dans une table basée sur l'ID de l'appel système, puis exécute la fonction que vous vouliez exécuter. Une fois terminé, il reviendra en mode utilisateur et votre processus recevra un statut de retour s'il a réussi ou s'il a rencontré une erreur. Les rouages internes des appels système deviennent vraiment détaillés, je vous recommande de consulter des informations en ligne si vous voulez en savoir plus. \n\nVous pouvez en fait voir les appels système qu'un processus effectue avec la commande strace. La commande strace est utile pour déboguer comment un programme s'est exécuté. \n\n<pre>$ strace ls</pre>",
  "exercise": "Aucun exercice pour cette leçon.",
  "quizQuestion": "Qu'est-ce qui est utilisé pour passer du mode utilisateur au mode noyau?",
  "quizAnswer": "appel système",
  "slug": "appelssysteme"
}