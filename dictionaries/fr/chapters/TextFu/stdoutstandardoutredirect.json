{
  "id": 1,
  "title": "stdout (Standard Out)",
  "lessonContent": "À ce stade, nous sommes devenus familiers avec de nombreuses commandes et leur sortie, ce qui nous amène à notre prochain sujet : les flux d'E/S (entrée/sortie). Exécutons la commande suivante et discutons de son fonctionnement. \n\n<pre>$ echo Bonjour le monde > peanuts.txt</pre>\n\nQue s'est-il passé ? Eh bien, vérifiez le répertoire où vous avez exécuté cette commande et vous devriez voir un fichier appelé peanuts.txt, regardez à l'intérieur de ce fichier et vous devriez voir le texte Bonjour le monde. Beaucoup de choses viennent de se produire en une seule commande, alors décomposons cela. \n\nCommençons par décomposer la première partie : \n\n<pre>$ echo Bonjour le monde</pre>\n\nNous savons que cela affiche Bonjour le monde à l'écran, mais comment ? Les processus utilisent des flux d'E/S pour recevoir une entrée et renvoyer une sortie. Par défaut, la commande echo prend l'entrée (entrée standard ou stdin) du clavier et renvoie la sortie (sortie standard ou stdout) à l'écran. C'est pourquoi lorsque vous tapez echo Bonjour le monde dans votre shell, vous obtenez Bonjour le monde à l'écran. Cependant, la redirection d'E/S nous permet de modifier ce comportement par défaut, nous offrant ainsi une plus grande flexibilité de fichiers. \n\nPassons à la partie suivante de la commande : \n\n<pre> > </pre>\n\nLe > est un opérateur de redirection qui nous permet de modifier l'endroit où va la sortie standard. Il nous permet d'envoyer la sortie de echo Bonjour le monde vers un fichier au lieu de l'écran. Si le fichier n'existe pas déjà, il le créera pour nous. Cependant, s'il existe, il l'écrasera (vous pouvez ajouter un indicateur shell pour éviter cela en fonction du shell que vous utilisez).\n\nEt voilà comment fonctionne essentiellement la redirection stdout !\n\nImaginons maintenant que je ne veuille pas écraser mon peanuts.txt, heureusement, il existe également un opérateur de redirection pour cela, >> : \n\n<pre>$ echo Bonjour le monde >> peanuts.txt</pre>\n\nCela ajoutera Bonjour le monde à la fin du fichier peanuts.txt, s'il n'existe pas déjà, il le créera pour nous comme il l'a fait avec l'opérateur de redirection > !",
  "exercise": "Essayez quelques commandes : \n\n<pre>\n$ ls -l /var/log > myoutput.txt\n$ echo Bonjour le monde > rm\n$ > somefile.txt \n</pre>",
  "quizQuestion": "Quel opérateur de redirection utilisez-vous pour ajouter une sortie à un fichier ?",
  "quizAnswer": ">>",
  "slug": "stdoutstandardoutredirect"
}