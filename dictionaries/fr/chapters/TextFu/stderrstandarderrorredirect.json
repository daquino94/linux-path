{
  "id": 3,
  "title": "stderr (Standard Error)",
  "lessonContent": "Essayons quelque chose de légèrement différent maintenant, essayons de lister le contenu d'un répertoire qui n'existe pas sur votre système et redirigeons à nouveau la sortie vers le fichier peanuts.txt.\n\n<pre>$ ls /fake/directory > peanuts.txt </pre>\n\nCe que vous devriez voir est : \n\n<pre>ls: cannot access /fake/directory: No such file or directory</pre>\n\nMaintenant, vous vous demandez probablement, ce message n'aurait-il pas dû être envoyé au fichier ? Il y a en fait un autre flux d'E/S en jeu ici appelé erreur standard (stderr). Par défaut, stderr envoie sa sortie également à l'écran, c'est un flux complètement différent de stdout. Vous devrez donc rediriger sa sortie d'une manière différente. \n\nMalheureusement, le redirigeur n'est pas aussi simple qu'utiliser <b>&lt;</b> ou <b>&gt;</b> mais c'est assez proche. Nous devrons utiliser des descripteurs de fichiers. Un descripteur de fichier est un nombre non négatif utilisé pour accéder à un fichier ou un flux. Nous approfondirons ce sujet plus tard, mais pour l'instant sachez que le descripteur de fichier pour stdin, stdout et stderr est respectivement 0, 1 et 2. \n\nDonc maintenant si nous voulons rediriger notre stderr vers le fichier, nous pouvons faire ceci : \n\n<pre>$ ls /fake/directory 2> peanuts.txt</pre>\n\nVous devriez voir uniquement les messages stderr dans peanuts.txt. \n\nEt si je voulais voir à la fois stderr et stdout dans le fichier peanuts.txt ? C'est possible de le faire avec des descripteurs de fichiers également : \n\n<pre>$ ls /fake/directory > peanuts.txt 2>&1</pre>\n\nCela envoie les résultats de ls /fake/directory vers le fichier peanuts.txt et redirige ensuite stderr vers stdout via 2>&1. L'ordre des opérations ici est important, 2>&1 envoie stderr vers là où stdout pointe. Dans ce cas, stdout pointe vers un fichier, donc 2>&1 envoie également stderr vers un fichier. Donc si vous ouvrez ce fichier peanuts.txt, vous devriez voir à la fois stderr et stdout. Dans notre cas, la commande ci-dessus n'affiche que stderr.\n\nIl y a un moyen plus court de rediriger à la fois stdout et stderr vers un fichier : \n\n<pre>$ ls /fake/directory &> peanuts.txt</pre>\n\nEt si je ne veux aucun de ces messages et que je veux me débarrasser complètement des messages stderr ? Eh bien, vous pouvez également rediriger la sortie vers un fichier spécial appelé /dev/null et il supprimera toute entrée.\n\n<pre>$ ls /fake/directory 2> /dev/null</pre>",
  "exercise": "Que fait la commande suivante ? \n\n<pre>$ ls /fake/directory >> /dev/null 2>&1</pre>",
  "quizQuestion": "Quel est le redirigeur pour stderr ?",
  "quizAnswer": "2>",
  "slug": "stderrstandarderrorredirect"
}