{
  "id": 4,
  "title": "Création de processus",
  "lessonContent": "Encore une fois, cette leçon et la suivante sont purement informatives pour vous permettre de voir ce qui se passe en coulisses, n'hésitez pas à y revenir une fois que vous aurez travaillé un peu plus avec les processus.\n\nLorsqu'un nouveau processus est créé, un processus existant se clone essentiellement en utilisant quelque chose appelé l'appel système fork (les appels système seront discutés bien plus tard). L'appel système fork crée un processus enfant presque identique, ce processus enfant prend un nouvel identifiant de processus (PID) et le processus original devient son processus parent et a quelque chose appelé un identifiant de processus parent <b>PPID</b>. Ensuite, le processus enfant peut soit continuer à utiliser le même programme que son parent utilisait auparavant, soit plus souvent utiliser l'appel système execve pour lancer un nouveau programme. Cet appel système détruit la gestion de la mémoire que le noyau avait mise en place pour ce processus et en met en place de nouvelles pour le nouveau programme. \n\nNous pouvons voir cela en action :\n\n<pre>$ ps l</pre>\n\nL'option l nous donne un format \"long\" ou une vue encore plus détaillée de nos processus en cours d'exécution. Vous verrez une colonne étiquetée <b>PPID</b>, c'est l'identifiant du parent. Maintenant, regardez votre terminal, vous verrez un processus en cours d'exécution qui est votre shell, donc sur mon système j'ai un processus bash en cours d'exécution. Rappelez-vous lorsque vous avez exécuté la commande ps l, vous l'avez exécutée à partir du processus qui exécutait bash. Maintenant, vous verrez que le <b>PID</b> du shell bash est le <b>PPID</b> de la commande <b>ps l</b>.\n\nDonc, si chaque processus doit avoir un parent et qu'ils ne sont que des forks les uns des autres, il doit y avoir une mère de tous les processus, n'est-ce pas ? Vous avez raison, lorsque le système démarre, le noyau crée un processus appelé <b>init</b>, il a un PID de 1. Le processus init ne peut pas être terminé à moins que le système ne s'arrête. Il s'exécute avec des privilèges root et exécute de nombreux processus qui maintiennent le système en marche. Nous examinerons de plus près init dans le cours de démarrage du système, pour l'instant sachez simplement que c'est le processus qui engendre tous les autres processus.",
  "exercise": "Jetez un œil à vos processus en cours d'exécution, pouvez-vous voir quels autres processus ont des parents ?",
  "quizQuestion": "Quel appel système crée un nouveau processus ?",
  "quizAnswer": "fork",
  "slug": "creationdeprocessus"
}