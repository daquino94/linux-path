{
  "id": 10,
  "title": "cp (Copy)",
  "lessonContent": "Let’s start making some copies of these files. Much like copy and pasting files in other operating systems, the shell gives us an even simpler way of doing that. \n\n<pre>$ cp mycoolfile /home/pete/Documents/cooldocs</pre>\n\nmycoolfile is the file you want to copy and /home/pete/Documents/cooldocs is where you are copying the file to.\n\nYou can copy multiple files and directories as well as use wildcards. A wildcard is a character that can be substituted for a pattern based selection, giving you more flexibility with searches. You can use wildcards in every command for more flexibility.\n\n<ul>\n<li>* the wildcard of wildcards, it's used to represent all single characters or any string.</li>\n<li>? used to represent one character</li>\n<li>[] used to represent any character within the brackets</li>\n</ul>\n\n<pre>$ cp *.jpg /home/pete/Pictures</pre>\n\nThis will copy all files with the .jpg extension in your current directory to the Pictures directory.\n\nA useful command is to use the -r flag, this will recursively copy the files and directories within a directory. \n\nTry to do a cp on a directory that contains a couple of files to your Documents directory. Didn’t work did it? Well that’s because you’ll need to copy over the files and directories inside as well with -r command.\n\n<pre>$ cp -r Pumpkin/ /home/pete/Documents</pre>\n\nOne thing to note, if you copy a file over to a directory that has the same filename, the file will be overwritten with whatever you are copying over. This is no bueno if you have a file that you don’t want to get accidentally overwritten. You can use the -i flag (interactive) to prompt you before overwriting a file. \n\n<pre>$ cp -i mycoolfile /home/pete/Pictures</pre>",
  "exercise": "Copy over a couple of files, be careful not to overwrite anything important.",
  "quizQuestion": "What flag do you need to specify to copy over a directory?",
  "quizAnswer": "-r",
  "slug": "copycpcommand"
}
